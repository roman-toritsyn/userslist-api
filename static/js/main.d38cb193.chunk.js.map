{"version":3,"sources":["api/api.tsx","customHooks/useLocalStorage.tsx","components/selectedNats/SelectedNats.tsx","components/userCard/UserCard.tsx","components/usersList/UsersList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","request","urlForFilter","fetch","then","responce","ok","Error","status","statusText","json","useLocalStorage","key","initialValue","useState","JSON","parse","localStorage","getItem","value","setValue","setItem","stringify","SelectedNats","React","memo","selectedNationalities","className","title","map","nat","UserCard","gender","email","dob","userName","picture","src","alt","UsersList","users","setUsers","selectedGender","setSelectedGender","setSelectedNationalities","useEffect","results","selectNatOptions","onSubmit","event","preventDefault","length","filterUrl","join","htmlFor","name","id","onChange","target","size","includes","filter","type","user","date","slice","first","last","large","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d38cb193.chunk.js","sourcesContent":["const BASE_URL = 'https://randomuser.me/api/?results=15&inc=gender,email,dob,name,picture,nat';\n\nexport const request = (urlForFilter = '') => {\n  return (\n    fetch(`${BASE_URL}${urlForFilter}`)\n      .then(responce => {\n        if (!responce.ok) {\n          throw new Error(`${responce.status} --- ${responce.statusText}`)\n        }\n\n        return responce.json();\n      }))\n};\n","import { useState } from \"react\";\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)!) || initialValue\n  );\n\n  const save = (value: any) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n    \n  };\n\n  return [value, save];\n}\n","import React from 'react';\n\nimport './index.scss'\n\ntype Props ={\n  selectedNationalities: string[],\n}\n\nexport const SelectedNats: React.FC<Props> = React.memo(\n  ({ selectedNationalities }) => {\n    return (\n      <div className=\"selectedNats\" title=\"Here you can see what nationalities will be used to filter users!\">\n        {selectedNationalities.map(nat => {\n          if (nat !== '&nat=') {\n            return (\n              <div key={nat} className=\"selectedNats__nat\">\n                {nat}\n              </div>\n            )\n          }\n          return null;\n        })}\n      </div>\n    )\n  }\n)\n","import React from 'react';\n\nimport './styles.scss';\n\ntype Props = {\n  gender: string,\n  email: string,\n  dob: string,\n  userName: string,\n  picture: string,\n  nat: string,\n}\n\nexport const UserCard: React.FC<Props> = React.memo(\n  ({\n    gender,\n    email,\n    dob,\n    userName,\n    picture,\n    nat,\n  }) => {\n    return (\n      <div\n        className=\"userCard\"\n      >\n        <div className=\"userCard__img-container\">\n          <img\n          className=\"userCard__img\"\n            src={picture}\n            alt={userName}\n          />\n        </div>\n  \n      <h2 className=\"userCard__title\">\n      {userName}\n      </h2>\n  \n        <section className=\"userCard__info\">\n          <div className=\"userCard__info-gender\">\n            {gender}\n          </div>\n\n          <div className=\"userCard__info-email\">\n            {email}\n          </div>\n\n          <div className=\"userCard__info-dob\">\n            {dob}\n          </div>\n\n          <div className=\"userCard__info-nat\">\n          {nat}\n          </div>\n        </section>\n      </div>\n    )\n  }\n)\n","import { useEffect, useState } from \"react\";\nimport { request } from \"../../api\";\nimport { useLocalStorage } from \"../../customHooks/useLocalStorage\";\nimport { SelectedNats } from \"../selectedNats\";\nimport { UserCard } from \"../userCard\";\n\nimport \"./styles.scss\";\n\ntype User = {\n  gender: string,\n  email: string,\n  dob: {\n    date: string,\n  }\n  name: {\n    first: string,\n    last: string,\n  },\n  picture: {\n    large: string,\n  },\n  nat: string,\n}\n\nexport const UsersList = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedGender, setSelectedGender] = useLocalStorage('selectedGender', '');\n  const [selectedNationalities, setSelectedNationalities] = useLocalStorage('selectedNat', ['&nat=']);\n\n  useEffect(() => {\n    request()\n      .then(responce => setUsers(responce.results))\n  }, []);\n\n  const getDate = (date:string) => {\n    return (\n      `${date.slice(0, 10)}`\n    )\n  }\n\n  const nationalities = ['AU', 'BR', 'CA', 'CH', 'DE', 'DK', 'ES', 'FI', 'FR', 'GB', 'IE', 'IR', 'NO', 'NL', 'NZ', 'TR', 'US'];\n\n  const selectNatOptions = nationalities.map(nat => (\n    <option\n      value={nat}\n      key={nat}\n    >\n      {nat}\n    </option>\n  ));\n\n  return (\n    <div>\n      <form\n        className=\"findUserForm\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (selectedGender || selectedNationalities.length !== 1) {\n            const filterUrl = selectedNationalities.join(',') + selectedGender;\n\n            request(filterUrl)\n              .then(responce => setUsers(responce.results));\n          } else {\n            request()\n              .then(responce => setUsers(responce.results));\n          }\n        }}\n      >\n        <div className=\"findUserForm__genderSelect\">\n          <label\n            htmlFor=\"genderSelect\"\n            className=\"findUserForm__genderSelectLabel\"\n            title=\"You can filter by gender\"\n          >\n            Select gender\n          </label>\n          <select\n            name=\"gender\"\n            id=\"genderSelect\"\n            value={selectedGender}\n            onChange={(event) => setSelectedGender(event.target.value)}\n          >\n            <option value=\"\">\n              Male and Female\n            </option>\n            <option value=\"&amp;gender=male\">\n              Male\n            </option>\n            <option value=\"&amp;gender=female\">\n              Female\n            </option>\n          </select>\n        </div>\n\n        <div className=\"findUserForm__natSelect\">\n          <label\n            htmlFor=\"nationality\"\n            className=\"findUserForm__natSelectLabel\"\n            title=\"You can filter by one or more nationalities!\"\n          >\n            Select nationality\n          </label>\n          <select\n            className=\"findUserForm__natSelectInput\"\n            name=\"nationality\"\n            id=\"nationality\"\n            size={10}\n            onChange={event => {\n              if (event.target.value === 'all-nationalities') {\n                setSelectedNationalities(['&nat=']);\n                return;\n              }\n\n              if (selectedNationalities.includes(event.target.value)) {\n                setSelectedNationalities(\n                  selectedNationalities.filter((nat: string) => nat !== event.target.value));\n              }\n\n              if (!selectedNationalities.includes(event.target.value)) {\n                setSelectedNationalities([...selectedNationalities, event.target.value]);\n              }\n            }}\n          >\n            <option value=\"all-nationalities\">\n              Reset nationalities' filter\n            </option>\n            {selectNatOptions}\n          </select>\n        </div>\n            <SelectedNats selectedNationalities={selectedNationalities}/>\n\n\n        <button className=\"findUserForm__submitButton\" type=\"submit\">\n          Find users\n        </button>\n      </form>\n\n      <div className=\"cardsContainer\">\n        {users.map(user => (\n          <UserCard\n            key={user.email}\n            gender={user.gender}\n            email={user.email}\n            dob={getDate(user.dob.date)}\n            userName={`${user.name.first} ${user.name.last}`}\n            picture={user.picture.large}\n            nat={user.nat}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n","import './App.css';\nimport { UsersList } from './components/usersList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UsersList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}